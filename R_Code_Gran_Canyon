library(raster)

setwd("C:/lab/")

gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")
gc

# rosso = 1
# verde = 2
# blu = 3

plotRGB(gc, r=1, g=2, b=3, stretch="lin")
plotRGB(gc, r=1, g=2, b=3, stretch="hist")

# Per ritagliagliare l'immagine troppo pesante
gcc <- crop(gc, drawExtent())
#selezionare angolo alto a sx e poi quello basso a dx
gcc

plotRGB(gcc, r=1, g=2, b=3, stretch="lin")
plotRGB(gcc, r=1, g=2, b=3, stretch="hist")

#1. Funzione per ottenere i valori (Get Values)
singlenr <- getValues(gcc)
singlenr

# 2. Classifcazione (non supervisionata)
kcluster <- kmeans(singlenr, centers = 3)
kcluster

# 3. Riconsegno i valori classificati attraverso la funzione "Set values"
gccclass <- setValues(gcc[[1]], kcluster$cluster)

cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(gccclass, col=cl)
#dal risultato possiamo notare che:
#alla classe 3 il classificatore ha assegnato il colore rosso per rappresentare il valore energetico più alto
#alla classe 1 il classificatore ha assegnato il colore nero per rappresentare il valore energetico più basso
#alla classe 2 il classificatore ha assegnato il colore giallo per rappresentare il valore energetico intermedio

#funzione che calcola la frequenza dei valori delle classi "freq"
frequencies <- freq(gccclass)
frequencies

#vedere il totale dei pixel dal nome dell'immagine "soclass" o assegnando a "tot" il valore della funzione "ncell", poi calcolare la frequenza in percentuale
gccclass
tot <- ncell("gccclass")
percentages = frequencies * 100 /  tot
percentages

